import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import string
from collections import Counter
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


class CipherComparison:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å–∏—á–Ω–∏—Ö —à–∏—Ñ—Ä—ñ–≤")
        self.window.geometry("1200x800")
        self.window.configure(bg='#f0f0f0')

        self.ukr_alphabet = '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è'
        self.create_widgets()

    def caesar_cipher(self, text, shift, decode=False):
        """–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –¶–µ–∑–∞—Ä—è"""
        if decode:
            shift = -shift
        result = []

        for char in text:
            if char.lower() in self.ukr_alphabet:
                is_upper = char.isupper()
                idx = self.ukr_alphabet.index(char.lower())
                new_idx = (idx + shift) % len(self.ukr_alphabet)
                new_char = self.ukr_alphabet[new_idx]
                result.append(new_char.upper() if is_upper else new_char)
            elif char in string.ascii_letters:
                is_upper = char.isupper()
                base = ord('A') if is_upper else ord('a')
                shifted = (ord(char) - base + shift) % 26
                result.append(chr(base + shifted))
            else:
                result.append(char)

        return ''.join(result)

    def vigenere_cipher(self, text, key, decode=False):
        """–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –í—ñ–∂–µ–Ω–µ—Ä–∞"""
        key = key.lower()
        result = []
        key_idx = 0

        for char in text:
            if char.lower() in self.ukr_alphabet:
                is_upper = char.isupper()
                char_idx = self.ukr_alphabet.index(char.lower())
                key_char = key[key_idx % len(key)]

                if key_char in self.ukr_alphabet:
                    key_shift = self.ukr_alphabet.index(key_char)
                else:
                    key_shift = ord(key_char.lower()) - ord('a')

                if decode:
                    key_shift = -key_shift

                new_idx = (char_idx + key_shift) % len(self.ukr_alphabet)
                new_char = self.ukr_alphabet[new_idx]
                result.append(new_char.upper() if is_upper else new_char)
                key_idx += 1
            elif char in string.ascii_letters:
                is_upper = char.isupper()
                base = ord('A') if is_upper else ord('a')
                char_pos = ord(char.lower()) - ord('a')
                key_char = key[key_idx % len(key)]
                key_shift = ord(key_char.lower()) - ord('a')

                if decode:
                    key_shift = -key_shift

                new_pos = (char_pos + key_shift) % 26
                result.append(chr(base + new_pos))
                key_idx += 1
            else:
                result.append(char)

        return ''.join(result)

    def generate_caesar_key(self, date):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–∞ –¥–ª—è –¶–µ–∑–∞—Ä—è (—Å—É–º–∞ —Ü–∏—Ñ—Ä –¥–∞—Ç–∏)"""
        return sum(int(d) for d in date if d.isdigit())

    def brute_force_caesar(self, encrypted_text):
        """Brute force –∞—Ç–∞–∫–∞ –Ω–∞ —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è"""
        results = []
        for shift in range(1, 34):  # –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞–±–µ—Ç–∫–∏
            decrypted = self.caesar_cipher(encrypted_text, shift, decode=True)
            results.append((shift, decrypted))
        return results

    def frequency_analysis(self, text):
        """–ß–∞—Å—Ç–æ—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É"""
        letters_only = ''.join(c.lower() for c in text if c.lower() in self.ukr_alphabet or c in string.ascii_lowercase)
        return Counter(letters_only)

    def calculate_complexity(self, cipher_type, key):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞"""
        if cipher_type == "–¶–µ–∑–∞—Ä—å":
            return f"–ù–∏–∑—å–∫–∞ (1 –ø–∞—Ä–∞–º–µ—Ç—Ä, {len(self.ukr_alphabet)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)"
        else:
            return f"–°–µ—Ä–µ–¥–Ω—è (–∫–ª—é—á –¥–æ–≤–∂–∏–Ω–æ—é {len(key)} —Å–∏–º–≤–æ–ª—ñ–≤)"

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.window, text="üîê –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å–∏—á–Ω–∏—Ö —à–∏—Ñ—Ä—ñ–≤",
                         font=('Arial', 18, 'bold'), bg='#f0f0f0', fg='#2c3e50')
        title.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥—É
        input_frame = ttk.LabelFrame(self.window, text="–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ", padding=10)
        input_frame.pack(fill='x', padx=20, pady=5)

        # –¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        tk.Label(input_frame, text="–¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:").grid(row=0, column=0, sticky='w', pady=5)
        self.text_input = scrolledtext.ScrolledText(input_frame, height=3, width=80, font=('Arial', 10))
        self.text_input.grid(row=1, column=0, columnspan=3, pady=5)
        self.text_input.insert('1.0', '–ó–∞—Ö–∏—Å—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó ‚Äì –≤–∞–∂–ª–∏–≤–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞')

        # –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        tk.Label(input_frame, text="–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–¥–ª—è –¶–µ–∑–∞—Ä—è):").grid(row=2, column=0, sticky='w', pady=5)
        self.date_input = ttk.Entry(input_frame, width=20, font=('Arial', 10))
        self.date_input.grid(row=2, column=1, sticky='w', pady=5)
        self.date_input.insert(0, '18022005')

        # –ü—Ä—ñ–∑–≤–∏—â–µ
        tk.Label(input_frame, text="–ü—Ä—ñ–∑–≤–∏—â–µ (–¥–ª—è –í—ñ–∂–µ–Ω–µ—Ä–∞):").grid(row=3, column=0, sticky='w', pady=5)
        self.surname_input = ttk.Entry(input_frame, width=20, font=('Arial', 10))
        self.surname_input.grid(row=3, column=1, sticky='w', pady=5)
        self.surname_input.insert(0, 'Novoseltsev')

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(input_frame, bg='white')
        btn_frame.grid(row=4, column=0, columnspan=3, pady=10)

        ttk.Button(btn_frame, text="üîí –ó–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏", command=self.encrypt_text).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="üîì –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏", command=self.decrypt_text).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="üìä –ê–Ω–∞–ª—ñ–∑", command=self.show_analysis).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="üî® Brute Force", command=self.brute_force).pack(side='left', padx=5)

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è)
        main_results_frame = tk.Frame(self.window, bg='#f0f0f0')
        main_results_frame.pack(fill='both', expand=True, padx=20, pady=5)

        # –õ—ñ–≤–∏–π —Ñ—Ä–µ–π–º - —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        left_frame = ttk.LabelFrame(main_results_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è", padding=10)
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¶–µ–∑–∞—Ä—è
        tk.Label(left_frame, text="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è:", font=('Arial', 11, 'bold')).pack(anchor='w', pady=5)
        self.caesar_result = scrolledtext.ScrolledText(left_frame, height=6, width=50, font=('Courier', 10))
        self.caesar_result.pack(fill='x', pady=5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –í—ñ–∂–µ–Ω–µ—Ä–∞
        tk.Label(left_frame, text="–®–∏—Ñ—Ä –í—ñ–∂–µ–Ω–µ—Ä–∞:", font=('Arial', 11, 'bold')).pack(anchor='w', pady=5)
        self.vigenere_result = scrolledtext.ScrolledText(left_frame, height=6, width=50, font=('Courier', 10))
        self.vigenere_result.pack(fill='x', pady=5)

        # –ü—Ä–∞–≤–∏–π —Ñ—Ä–µ–π–º - –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        right_frame = ttk.LabelFrame(main_results_frame, text="–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è", padding=10)
        right_frame.pack(side='right', fill='both', expand=True)

        self.comparison_table = scrolledtext.ScrolledText(right_frame, height=20, width=65, font=('Courier', 9))
        self.comparison_table.pack(fill='both', expand=True)

    def encrypt_text(self):
        """–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ–±–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏"""
        text = self.text_input.get('1.0', 'end-1c')
        date = self.date_input.get()
        surname = self.surname_input.get()

        if not text or not date or not surname:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
        caesar_shift = self.generate_caesar_key(date)

        # –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        caesar_encrypted = self.caesar_cipher(text, caesar_shift)
        vigenere_encrypted = self.vigenere_cipher(text, surname)

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.caesar_result.delete('1.0', 'end')
        self.caesar_result.insert('1.0', f"–ö–ª—é—á (–∑—Å—É–≤): {caesar_shift}\n")
        self.caesar_result.insert('end', f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {caesar_encrypted}")

        self.vigenere_result.delete('1.0', 'end')
        self.vigenere_result.insert('1.0', f"–ö–ª—é—á: {surname}\n")
        self.vigenere_result.insert('end', f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {vigenere_encrypted}")

        # –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        self.update_comparison_table(text, caesar_encrypted, vigenere_encrypted, caesar_shift, surname)

    def decrypt_text(self):
        """–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        date = self.date_input.get()
        surname = self.surname_input.get()

        caesar_shift = self.generate_caesar_key(date)

        # –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¶–µ–∑–∞—Ä—è
        caesar_text = self.caesar_result.get('1.0', 'end-1c').split('\n')[-1].replace('–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ', '')
        if caesar_text:
            caesar_decrypted = self.caesar_cipher(caesar_text, caesar_shift, decode=True)
            messagebox.showinfo("–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–¶–µ–∑–∞—Ä—å)", caesar_decrypted)

        # –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –í—ñ–∂–µ–Ω–µ—Ä–∞
        vigenere_text = self.vigenere_result.get('1.0', 'end-1c').split('\n')[-1].replace('–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ', '')
        if vigenere_text:
            vigenere_decrypted = self.vigenere_cipher(vigenere_text, surname, decode=True)
            messagebox.showinfo("–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–í—ñ–∂–µ–Ω–µ—Ä)", vigenere_decrypted)

    def update_comparison_table(self, original, caesar_enc, vigenere_enc, caesar_key, vigenere_key):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
        self.comparison_table.delete('1.0', 'end')

        table = f"""
{'=' * 90}
{'–ü–∞—Ä–∞–º–µ—Ç—Ä':<30} | {'–¶–µ–∑–∞—Ä—å':<25} | {'–í—ñ–∂–µ–Ω–µ—Ä':<25}
{'=' * 90}
{'–î–æ–≤–∂–∏–Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É':<30} | {len(original):<25} | {len(original):<25}
{'–î–æ–≤–∂–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É':<30} | {len(caesar_enc):<25} | {len(vigenere_enc):<25}
{'–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∫–ª—é—á–∞':<30} | {self.calculate_complexity('–¶–µ–∑–∞—Ä—å', str(caesar_key)):<25} | {self.calculate_complexity('–í—ñ–∂–µ–Ω–µ—Ä', vigenere_key):<25}
{'–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤':<30} | {len(set(caesar_enc)):<25} | {len(set(vigenere_enc)):<25}
{'=' * 90}

–í–ò–°–ù–û–í–ö–ò:
‚Ä¢ –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è: –ü—Ä–æ—Å—Ç–∏–π, –∞–ª–µ –≤—Ä–∞–∑–ª–∏–≤–∏–π –¥–æ brute force (34 –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
‚Ä¢ –®–∏—Ñ—Ä –í—ñ–∂–µ–Ω–µ—Ä–∞: –°–∫–ª–∞–¥–Ω—ñ—à–∏–π, —Å—Ç—ñ–π–∫—ñ—à–∏–π –¥–æ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
‚Ä¢ –û–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É —Ç–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ –∑–Ω–∞–∫–∏
        """

        self.comparison_table.insert('1.0', table)

    def show_analysis(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        text = self.text_input.get('1.0', 'end-1c')
        date = self.date_input.get()
        surname = self.surname_input.get()

        caesar_shift = self.generate_caesar_key(date)
        caesar_enc = self.caesar_cipher(text, caesar_shift)
        vigenere_enc = self.vigenere_cipher(text, surname)

        # –ß–∞—Å—Ç–æ—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        freq_original = self.frequency_analysis(text)
        freq_caesar = self.frequency_analysis(caesar_enc)
        freq_vigenere = self.frequency_analysis(vigenere_enc)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        fig, axes = plt.subplots(1, 3, figsize=(15, 4))

        for ax, freq, title in zip(axes,
                                   [freq_original, freq_caesar, freq_vigenere],
                                   ['–û—Ä–∏–≥—ñ–Ω–∞–ª', '–¶–µ–∑–∞—Ä—å', '–í—ñ–∂–µ–Ω–µ—Ä']):
            if freq:
                chars = list(freq.keys())[:10]
                counts = [freq[c] for c in chars]
                ax.bar(chars, counts, color='steelblue')
                ax.set_title(title, fontsize=12, weight='bold')
                ax.set_xlabel('–°–∏–º–≤–æ–ª–∏')
                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                ax.grid(axis='y', alpha=0.3)

        plt.tight_layout()

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ
        analysis_window = tk.Toplevel(self.window)
        analysis_window.title("–ß–∞—Å—Ç–æ—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        analysis_window.geometry("1000x500")

        canvas = FigureCanvasTkAgg(fig, analysis_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def brute_force(self):
        """Brute force –∞—Ç–∞–∫–∞ –Ω–∞ –¶–µ–∑–∞—Ä—è"""
        caesar_text = self.caesar_result.get('1.0', 'end-1c').split('\n')[-1].replace('–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ', '')

        if not caesar_text:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—à–∏—Ñ—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç!")
            return

        results = self.brute_force_caesar(caesar_text)

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        bf_window = tk.Toplevel(self.window)
        bf_window.title("Brute Force - –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è")
        bf_window.geometry("800x600")

        tk.Label(bf_window, text="–í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:",
                 font=('Arial', 12, 'bold')).pack(pady=10)

        result_text = scrolledtext.ScrolledText(bf_window, width=90, height=30, font=('Courier', 9))
        result_text.pack(padx=10, pady=10, fill='both', expand=True)

        for shift, decrypted in results:
            result_text.insert('end', f"–ó—Å—É–≤ {shift:2d}: {decrypted}\n")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
        self.window.mainloop()


if __name__ == "__main__":
    app = CipherComparison()
    app.run()