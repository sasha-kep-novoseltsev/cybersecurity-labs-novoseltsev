import tkinter as tk
from tkinter import ttk, messagebox
import re
from datetime import datetime
import string


class PasswordSecurityAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –±–µ–∑–ø–µ–∫–∏ –ø–∞—Ä–æ–ª—ñ–≤")
        self.root.geometry("800x700")
        self.root.configure(bg='#f0f0f0')

        # –°—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–∂–µ—Ç—ñ–≤
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#f0f0f0')
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), background='#f0f0f0')
        style.configure('Good.TLabel', foreground='green', background='#f0f0f0')
        style.configure('Warning.TLabel', foreground='orange', background='#f0f0f0')
        style.configure('Bad.TLabel', foreground='red', background='#f0f0f0')

        # –°–ª–æ–≤–Ω–∏–∫ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Å–ª—ñ–≤
        self.common_words = ['password', 'admin', 'user', 'qwerty', '123456',
                             'letmein', 'welcome', 'monkey', 'dragon', 'master',
                             '–ø–∞—Ä–æ–ª—å', '–∞–¥–º—ñ–Ω', '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á']

        self.create_widgets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        title_frame.pack(fill='x', pady=(0, 20))
        title_frame.pack_propagate(False)

        title_label = tk.Label(title_frame, text="üîê –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –±–µ–∑–ø–µ–∫–∏ –ø–∞—Ä–æ–ª—ñ–≤",
                               font=('Arial', 18, 'bold'), bg='#2c3e50', fg='white')
        title_label.pack(expand=True)

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20)

        # –°–µ–∫—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        personal_frame = tk.LabelFrame(main_frame, text="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ",
                                       font=('Arial', 12, 'bold'), bg='#f0f0f0', pady=10)
        personal_frame.pack(fill='x', pady=(0, 15))

        # –ü–æ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        tk.Label(personal_frame, text="–Ü–º'—è:", bg='#f0f0f0').grid(row=0, column=0, sticky='w', padx=5)
        self.name_entry = tk.Entry(personal_frame, width=20)
        self.name_entry.grid(row=0, column=1, padx=5, pady=2)

        tk.Label(personal_frame, text="–ü—Ä—ñ–∑–≤–∏—â–µ:", bg='#f0f0f0').grid(row=0, column=2, sticky='w', padx=5)
        self.surname_entry = tk.Entry(personal_frame, width=20)
        self.surname_entry.grid(row=0, column=3, padx=5, pady=2)

        tk.Label(personal_frame, text="–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", bg='#f0f0f0').grid(row=1, column=0, sticky='w', padx=5)
        self.birth_entry = tk.Entry(personal_frame, width=20)
        self.birth_entry.grid(row=1, column=1, padx=5, pady=2)
        tk.Label(personal_frame, text="(DD.MM.YYYY)", font=('Arial', 8), bg='#f0f0f0').grid(row=1, column=2, sticky='w')

        tk.Label(personal_frame, text="Email:", bg='#f0f0f0').grid(row=2, column=0, sticky='w', padx=5)
        self.email_entry = tk.Entry(personal_frame, width=40)
        self.email_entry.grid(row=2, column=1, columnspan=2, padx=5, pady=2, sticky='w')

        tk.Label(personal_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:", bg='#f0f0f0').grid(row=3, column=0, sticky='w', padx=5)
        self.phone_entry = tk.Entry(personal_frame, width=20)
        self.phone_entry.grid(row=3, column=1, padx=5, pady=2)

        # –°–µ–∫—Ü—ñ—è –ø–∞—Ä–æ–ª—è
        password_frame = tk.LabelFrame(main_frame, text="–ê–Ω–∞–ª—ñ–∑ –ø–∞—Ä–æ–ª—è",
                                       font=('Arial', 12, 'bold'), bg='#f0f0f0', pady=10)
        password_frame.pack(fill='x', pady=(0, 15))

        tk.Label(password_frame, text="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:", bg='#f0f0f0', font=('Arial', 10, 'bold')).pack(anchor='w')
        self.password_entry = tk.Entry(password_frame, width=50, show="*", font=('Arial', 12))
        self.password_entry.pack(pady=5, anchor='w')

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
        button_frame = tk.Frame(password_frame, bg='#f0f0f0')
        button_frame.pack(fill='x', pady=5)

        self.show_password_var = tk.BooleanVar()
        show_check = tk.Checkbutton(button_frame, text="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å",
                                    variable=self.show_password_var,
                                    command=self.toggle_password_visibility, bg='#f0f0f0')
        show_check.pack(side='left')

        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª—ñ–∑—É
        analyze_btn = tk.Button(button_frame, text="üîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å",
                                command=self.analyze_password,
                                bg='#3498db', fg='white', font=('Arial', 11, 'bold'),
                                relief='flat', padx=20, pady=8)
        analyze_btn.pack(side='right')

        # –°–µ–∫—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results_frame = tk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É",
                                      font=('Arial', 12, 'bold'), bg='#f0f0f0')
        results_frame.pack(fill='both', expand=True)

        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        text_frame = tk.Frame(results_frame, bg='#f0f0f0')
        text_frame.pack(fill='both', expand=True, padx=10, pady=10)

        self.results_text = tk.Text(text_frame, wrap='word', font=('Arial', 10),
                                    bg='white', relief='sunken', bd=2)
        scrollbar = tk.Scrollbar(text_frame, orient='vertical', command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=scrollbar.set)

        self.results_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–µ–≥—ñ–≤ –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        self.results_text.tag_configure('good', foreground='green', font=('Arial', 10, 'bold'))
        self.results_text.tag_configure('warning', foreground='orange', font=('Arial', 10, 'bold'))
        self.results_text.tag_configure('bad', foreground='red', font=('Arial', 10, 'bold'))
        self.results_text.tag_configure('header', font=('Arial', 12, 'bold'))
        self.results_text.tag_configure('bold', font=('Arial', 10, 'bold'))

    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.configure(show="")
        else:
            self.password_entry.configure(show="*")

    def analyze_password(self):
        password = self.password_entry.get()
        if not password:
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
            return

        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_text.delete(1.0, tk.END)

        # –ó–±—ñ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        personal_data = {
            'name': self.name_entry.get().lower(),
            'surname': self.surname_entry.get().lower(),
            'birth': self.birth_entry.get(),
            'email': self.email_entry.get().lower(),
            'phone': self.phone_entry.get()
        }

        # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
        score = 0
        max_score = 100

        self.add_result("üîê –ó–í–Ü–¢ –ü–†–û –ë–ï–ó–ü–ï–ö–£ –ü–ê–†–û–õ–Ø\n", 'header')
        self.add_result("=" * 50 + "\n\n", 'bold')

        # –ê–Ω–∞–ª—ñ–∑ –¥–æ–≤–∂–∏–Ω–∏
        length_score, length_feedback = self.analyze_length(password)
        score += length_score
        self.add_result(f"üìè –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {len(password)} —Å–∏–º–≤–æ–ª—ñ–≤\n", 'bold')
        self.add_result(f"   {length_feedback}\n\n")

        # –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        complexity_score, complexity_feedback = self.analyze_complexity(password)
        score += complexity_score
        self.add_result("üéØ –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:\n", 'bold')
        for feedback in complexity_feedback:
            self.add_result(f"   {feedback}\n")
        self.add_result("\n")

        # –ê–Ω–∞–ª—ñ–∑ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö —Å–ª—ñ–≤
        dict_score, dict_feedback = self.analyze_dictionary(password)
        score += dict_score
        self.add_result("üìö –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö —Å–ª—ñ–≤:\n", 'bold')
        self.add_result(f"   {dict_feedback}\n\n")

        # –ê–Ω–∞–ª—ñ–∑ –∑–≤'—è–∑–∫—É –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        personal_score, personal_feedback = self.analyze_personal_connection(password, personal_data)
        score += personal_score
        self.add_result("üë§ –ó–≤'—è–∑–æ–∫ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏:\n", 'bold')
        for feedback in personal_feedback:
            self.add_result(f"   {feedback}\n")
        self.add_result("\n")

        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        self.add_result("üìä –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê:\n", 'header')
        self.add_result("=" * 30 + "\n")

        percentage = (score / max_score) * 100
        if percentage >= 80:
            self.add_result(f"–û—Ü—ñ–Ω–∫–∞: {percentage:.0f}% - –í–Ü–î–ú–Ü–ù–ù–û! üü¢\n", 'good')
            self.add_result("–í–∞—à –ø–∞—Ä–æ–ª—å –º–∞—î –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏.\n\n", 'good')
        elif percentage >= 60:
            self.add_result(f"–û—Ü—ñ–Ω–∫–∞: {percentage:.0f}% - –î–û–ë–†–ï üü°\n", 'warning')
            self.add_result("–í–∞—à –ø–∞—Ä–æ–ª—å –º–∞—î —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏, –∞–ª–µ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏.\n\n", 'warning')
        else:
            self.add_result(f"–û—Ü—ñ–Ω–∫–∞: {percentage:.0f}% - –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø! üî¥\n", 'bad')
            self.add_result("–í–∞—à –ø–∞—Ä–æ–ª—å –º–∞—î –Ω–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏.\n\n", 'bad')

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = self.generate_recommendations(password, personal_data, percentage)
        self.add_result("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ü–û–ö–†–ê–©–ï–ù–ù–Ø:\n", 'header')
        self.add_result("=" * 35 + "\n")
        for i, rec in enumerate(recommendations, 1):
            self.add_result(f"{i}. {rec}\n")

    def add_result(self, text, tag='normal'):
        self.results_text.insert(tk.END, text, tag)
        self.results_text.see(tk.END)

    def analyze_length(self, password):
        length = len(password)
        if length >= 16:
            return 25, "‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ (16+ —Å–∏–º–≤–æ–ª—ñ–≤)"
        elif length >= 12:
            return 20, "‚úÖ –•–æ—Ä–æ—à–∞ –¥–æ–≤–∂–∏–Ω–∞ (12-15 —Å–∏–º–≤–æ–ª—ñ–≤)"
        elif length >= 8:
            return 15, "‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ (8-11 —Å–∏–º–≤–æ–ª—ñ–≤)"
        else:
            return 0, "‚ùå –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å (–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤)"

    def analyze_complexity(self, password):
        score = 0
        feedback = []

        if re.search(r'[a-z]', password):
            score += 5
            feedback.append("‚úÖ –ú—ñ—Å—Ç–∏—Ç—å –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏")
        else:
            feedback.append("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏")

        if re.search(r'[A-Z]', password):
            score += 5
            feedback.append("‚úÖ –ú—ñ—Å—Ç–∏—Ç—å –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
        else:
            feedback.append("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏")

        if re.search(r'[0-9]', password):
            score += 5
            feedback.append("‚úÖ –ú—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–∏")
        else:
            feedback.append("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏")

        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            score += 10
            feedback.append("‚úÖ –ú—ñ—Å—Ç–∏—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏")
        else:
            feedback.append("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏")

        return score, feedback

    def analyze_dictionary(self, password):
        password_lower = password.lower()
        found_words = []

        for word in self.common_words:
            if word in password_lower:
                found_words.append(word)

        if not found_words:
            return 20, "‚úÖ –ù–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö —Å–ª—ñ–≤"
        else:
            return 0, f"‚ùå –ú—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(found_words)}"

    def analyze_personal_connection(self, password, personal_data):
        score = 20
        feedback = []
        found_connections = []

        password_lower = password.lower()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞
        if personal_data['name'] and personal_data['name'] in password_lower:
            found_connections.append("—ñ–º'—è")
            score -= 10

        if personal_data['surname'] and personal_data['surname'] in password_lower:
            found_connections.append("–ø—Ä—ñ–∑–≤–∏—â–µ")
            score -= 10

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if personal_data['birth']:
            birth_parts = personal_data['birth'].replace('.', '').replace('/', '').replace('-', '')
            if len(birth_parts) >= 4:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∫—É
                year = birth_parts[-4:]
                if year in password:
                    found_connections.append(f"—Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ({year})")
                    score -= 10

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è
                if len(birth_parts) >= 8:
                    day_month = birth_parts[:4]
                    if day_month in password:
                        found_connections.append("–¥–µ–Ω—å/–º—ñ—Å—è—Ü—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
                        score -= 5

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
        if personal_data['email']:
            email_part = personal_data['email'].split('@')[0]
            if email_part in password_lower:
                found_connections.append("—á–∞—Å—Ç–∏–Ω–∞ email")
                score -= 10

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if personal_data['phone']:
            phone_digits = re.sub(r'\D', '', personal_data['phone'])
            if len(phone_digits) >= 4:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 4 —Ü–∏—Ñ—Ä
                last_digits = phone_digits[-4:]
                if last_digits in password:
                    found_connections.append(f"—á–∞—Å—Ç–∏–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ({last_digits})")
                    score -= 10

        if found_connections:
            feedback.append(f"‚ùå –ú—ñ—Å—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: {', '.join(found_connections)}")
        else:
            feedback.append("‚úÖ –ù–µ –º—ñ—Å—Ç–∏—Ç—å –æ—á–µ–≤–∏–¥–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")

        return max(0, score), feedback

    def generate_recommendations(self, password, personal_data, score):
        recommendations = []

        if len(password) < 12:
            recommendations.append("–ó–±—ñ–ª—å—à—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–æ –º—ñ–Ω—ñ–º—É–º 12 —Å–∏–º–≤–æ–ª—ñ–≤")

        if not re.search(r'[A-Z]', password):
            recommendations.append("–î–æ–¥–∞–π—Ç–µ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (A-Z)")

        if not re.search(r'[a-z]', password):
            recommendations.append("–î–æ–¥–∞–π—Ç–µ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ (a-z)")

        if not re.search(r'[0-9]', password):
            recommendations.append("–î–æ–¥–∞–π—Ç–µ —Ü–∏—Ñ—Ä–∏ (0-9)")

        if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            recommendations.append("–î–æ–¥–∞–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (!@#$%^&* —Ç–æ—â–æ)")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ —Å–ª–æ–≤–∞
        password_lower = password.lower()
        for word in self.common_words:
            if word in password_lower:
                recommendations.append(f"–£–Ω–∏–∫–∞–π—Ç–µ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Å–ª—ñ–≤ —è–∫ '{word}'")
                break

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if any([personal_data['name'] and personal_data['name'] in password_lower,
                personal_data['surname'] and personal_data['surname'] in password_lower]):
            recommendations.append("–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–≤–æ—î —ñ–º'—è —á–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –≤ –ø–∞—Ä–æ–ª—ñ")

        if score < 60:
            recommendations.extend([
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤",
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–æ–ª—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É",
                "–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä–æ–ª—ñ–≤",
                "–£–≤—ñ–º–∫–Ω—ñ—Ç—å –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é —Ç–∞–º, –¥–µ —Ü–µ –º–æ–∂–ª–∏–≤–æ"
            ])

        if not recommendations:
            recommendations.append("–í–∞—à –ø–∞—Ä–æ–ª—å –º–∞—î –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ.")

        return recommendations


def main():
    root = tk.Tk()
    app = PasswordSecurityAnalyzer(root)
    root.mainloop()


if __name__ == "__main__":
    main()